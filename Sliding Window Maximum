from collections import deque

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        if not nums or k == 0:
            return []

        n = len(nums)
        maxsarr = []
        dq = deque()  # stores indexes

        for i in range(n):
            # Remove elements out of the current window
            while dq and dq[0] < i - k + 1:
                dq.popleft()

            # Remove smaller elements (not useful as max)
            while dq and nums[dq[-1]] < nums[i]:
                dq.pop()

            # Add current index
            dq.append(i)

            # Append max from deque front (when window is valid)
            if i >= k - 1:
                maxsarr.append(nums[dq[0]])

        return maxsarr

# Test it
s1 = Solution()
nums = [1, 3, -1, -3, 5, 3, 6, 7]
k = 3
print(s1.maxSlidingWindow(nums, k))
