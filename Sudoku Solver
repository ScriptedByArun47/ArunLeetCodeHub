class Solution:
    def solveSudoku(self, board) :
        def find_empty(board):
            for r in range(9):
                for c in range(9):
                    if board[r][c] == '.':
                        return r, c  
            return None

        def is_valid(board, num, row, col):
            # Check the row
            for c in range(9):
                if board[row][c] == num:
                    return False

            # Check the column
            for r in range(9):
                if board[r][col] == num:
                    return False

           
            start_row, start_col = 3 * (row // 3), 3 * (col // 3)
            for r in range(start_row, start_row + 3):
                for c in range(start_col, start_col + 3):
                    if board[r][c] == num:
                        return False

            return True

        def solve(board):
            empty = find_empty(board)
            if not empty:
                return True  

            row, col = empty
            for num in map(str, range(1, 10)):  
                if is_valid(board, num, row, col):
                    board[row][col] = num 
                    
                    if solve(board):
                        return True  
                    
                    board[row][col] = '.'  

            return False  

        solve(board)
